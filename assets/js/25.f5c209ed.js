(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{539:function(t,_,v){"use strict";v.r(_);var i=v(3),e=Object(i.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"一-安装本地仓库-初始化仓库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一-安装本地仓库-初始化仓库"}},[t._v("#")]),t._v(" 一：安装本地仓库(初始化仓库)")]),t._v(" "),v("p",[v("strong",[t._v("打开目标空文件 右键打开 Git Bash Here 命令（或者终端） 打开git终端 输入命令")])]),t._v(" "),v("ul",[v("li",[t._v("git init 初始化本地仓库")]),t._v(" "),v("li",[t._v('git config --global user.name "（名字）"')]),t._v(" "),v("li",[t._v('git config --global user.email "（你的邮箱号码）"')])]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"二-查看工作区内容"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二-查看工作区内容"}},[t._v("#")]),t._v(" 二：查看工作区内容")]),t._v(" "),v("ul",[v("li",[t._v("git status 查看当前工作区状态")])]),t._v(" "),v("p",[v("strong",[t._v("提示说明")]),t._v("：")]),t._v(" "),v("ul",[v("li",[t._v("NO commits yet 是没有最新的提交记录(暂存不算)")]),t._v(" "),v("li",[t._v("Untracked files: 是显示未跟踪的文件，意思是git没有对该文件进行操作（如提交，暂存）")])]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"三-对工作区全部文件进行暂存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三-对工作区全部文件进行暂存"}},[t._v("#")]),t._v(" 三：对工作区全部文件进行暂存")]),t._v(" "),v("ul",[v("li",[t._v("git add . 将本地仓库放入缓存区")])]),t._v(" "),v("p",[v("strong",[t._v("提示说明")]),t._v("：")]),t._v(" "),v("ul",[v("li",[t._v("被标记为 new file 这是仓库新暂存的文件")])]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"四-提交"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四-提交"}},[t._v("#")]),t._v(" 四：提交")]),t._v(" "),v("ul",[v("li",[t._v("git commit 将暂存内容放入分支（新的正式版本）")]),t._v(" "),v("li",[t._v("git commit -m 'add' 记录提交版本信息日志")])]),t._v(" "),v("p",[v("strong",[t._v("提示说明")]),t._v("：")]),t._v(" "),v("ul",[v("li",[t._v("nothing to commit, 暂存区没有需要提交的内容")]),t._v(" "),v("li",[t._v("working tree clean 工作区干净")])]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"五-关连远程仓库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#五-关连远程仓库"}},[t._v("#")]),t._v(" 五 关连远程仓库")]),t._v(" "),v("p",[t._v("1: 关联远程仓库")]),t._v(" "),v("ul",[v("li",[t._v("git remote add origin（地址名字）https://gitee.com/salted_fish_mccx_02/wegther_mall.git（远程仓库链接）")])]),t._v(" "),v("p",[t._v("2: 查看关联远程仓库地址")]),t._v(" "),v("ul",[v("li",[t._v("git remote -v")])]),t._v(" "),v("p",[t._v("3: 推送到远程仓库")]),t._v(" "),v("ul",[v("li",[t._v("git push origin(自定义的仓库地址) master(默认分支)")])]),t._v(" "),v("p",[t._v("4: 强制推送到远程仓库")]),t._v(" "),v("ul",[v("li",[t._v("git push -u -f origin master")])]),t._v(" "),v("blockquote",[v("p",[t._v("git push 失败提示\n原因：通过查看提示信息，我发现，是因为本地仓库和远程仓库的文件不一致所致，也就是说，github允许你本地仓库有的东西，远程仓库里没有，但不允许远程仓库有的东西，你本地仓库没有。问题找到了，解决办法就很简单了，那就是在push之前先同步一下本地仓库与远程仓库的文件。使用以下命令")])]),t._v(" "),v("p",[t._v("5: 初始拉取 从远程拉取数据")]),t._v(" "),v("ul",[v("li",[t._v("git pull origin（仓库地址名字） master")])]),t._v(" "),v("p",[t._v("6: 同步 从远程仓库的某个分支更新数据")]),t._v(" "),v("ul",[v("li",[t._v("git pull --rebase origin（仓库地址名字） master（分支）")])]),t._v(" "),v("p",[v("strong",[t._v("从远程仓库直接完全覆盖现在的仓库")])]),t._v(" "),v("ul",[v("li",[t._v("git fetch --all")]),t._v(" "),v("li",[t._v("git reset --hard origin/master")]),t._v(" "),v("li",[t._v("git pull")])]),t._v(" "),v("p",[v("strong",[t._v("说明")])]),t._v(" "),v("ul",[v("li",[t._v("第一个是：拉取所有更新，不同步；（从远程下载最新）")]),t._v(" "),v("li",[t._v("第二个是：本地代码同步线上最新版本(会覆盖本地所有与远程仓库上同名的文件)；")]),t._v(" "),v("li",[t._v("第三个是：再更新一次（其实也可以不用，第二步命令做过了其实）")])]),t._v(" "),v("h2",{attrs:{id:"六克隆远程仓库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#六克隆远程仓库"}},[t._v("#")]),t._v(" 六克隆远程仓库")]),t._v(" "),v("ul",[v("li",[t._v("git clone https://gitee.com/salted_fish_machine_05/meteorological_app.git（远程地址）")])]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"七-查看-创建-分支"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#七-查看-创建-分支"}},[t._v("#")]),t._v(" 七：查看,创建 分支")]),t._v(" "),v("p",[t._v("1：查看本地分支")]),t._v(" "),v("ul",[v("li",[t._v("git branch 标记 *号的分子为目前使用分支一般一开始默认 *号在master分支上")])]),t._v(" "),v("p",[t._v("2： 新建分支")]),t._v(" "),v("ul",[v("li",[t._v("git branch dev(新建分支，新的分支名字，dev自定义)")])]),t._v(" "),v("p",[t._v("3：切换分支")]),t._v(" "),v("ul",[v("li",[t._v("git checkout dev(要切换的分支名称)")]),t._v(" "),v("li",[t._v("当git add . git commit -m 操作会提交到当前的分支上，当切换到不同的分支\n显示的文件，或者文件内容会不同，因为不同的分支上有你提交的不同内容")])]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"八-查看提交日志"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#八-查看提交日志"}},[t._v("#")]),t._v(" 八：查看提交日志")]),t._v(" "),v("ul",[v("li",[t._v("git log --oneline 查看日志")]),t._v(" "),v("li",[t._v("git merge dev(非当前所在的分支) 把其他分支合并到当前的分支上")])]),t._v(" "),v("p",[v("strong",[t._v("其他关于git的问题")]),t._v(" "),v("a",{attrs:{href:"https://blog.csdn.net/weixin_41056807/article/details/83501058",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/weixin_41056807/article/details/83501058"),v("OutboundLink")],1)]),t._v(" "),v("h2",{attrs:{id:"九-版本回退"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#九-版本回退"}},[t._v("#")]),t._v(" 九： 版本回退")]),t._v(" "),v("ul",[v("li",[t._v("git log查看更新日志")]),t._v(" "),v("li",[t._v("git reset b2345avgf370 ---还原到上个版本，指定的commit id序号就可以")])]),t._v(" "),v("h2",{attrs:{id:"九-生成密钥方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#九-生成密钥方法"}},[t._v("#")]),t._v(" 九：生成密钥方法")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://www.cnblogs.com/yjlch1016/p/9692840.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cnblogs.com/yjlch1016/p/9692840.html"),v("OutboundLink")],1)]),t._v(" "),v("h2",{attrs:{id:"十-认证失败清除缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#十-认证失败清除缓存"}},[t._v("#")]),t._v(" 十 认证失败清除缓存")]),t._v(" "),v("p",[t._v("git config --system --unset credential.helper")])])}),[],!1,null,null,null);_.default=e.exports}}]);