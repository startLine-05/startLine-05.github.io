(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{546:function(t,e,a){"use strict";a.r(e);var s=a(3),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("strong",[t._v("转载")]),t._v(" "),a("a",{attrs:{href:"https://github.com/yisainan/web-interview/blob/master/README.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("齐丶先丶森」github"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_1-http-状态码-http2-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-http-状态码-http2-是什么"}},[t._v("#")]),t._v(" 1. Http 状态码，Http2 是什么")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("200 欢迎回来，主人 （正常；请求已完成。）")]),t._v(" "),a("p",[t._v("301 人家搬家了 （已移动 — 请求的数据具有新的位置且更改是永久的。）")]),t._v(" "),a("p",[t._v("307 不是这里，换个地方啦 （重新请求的 URL，客户端自动重新请求新的地址）")]),t._v(" "),a("p",[t._v("400 不要把奇怪的东西给人家嘛 （错误请求 — 请求中有语法问题，或不能满足请求。）")]),t._v(" "),a("p",[t._v("403 这里不可以啦！（禁止 — 即使有授权也不需要访问。）")]),t._v(" "),a("p",[t._v("404 这里什么都没有 --- 人家是平的啦。 （找不到 — 服务器找不到给定的资源；文档不存在。）")]),t._v(" "),a("p",[t._v("405 打开方式不对 （资源被禁止）")]),t._v(" "),a("p",[t._v("414 这... 太长了啦 （请求 - URI 太长）")]),t._v(" "),a("p",[t._v("500 服务姬坏掉了啦 （内部错误 — 因为意外情况，服务器不能完成请求。）")]),t._v(" "),a("p",[t._v("503 不要...人家还没准备好啦 （无法获得服务 — 由于临时过载或维护，服务器无法处理请求。）")]),t._v(" "),a("p",[t._v("101 服务姬傲娇中 （服务器将遵从客户的请求转换到另外一种协议）")]),t._v(" "),a("p",[t._v("100 人家... 还要... （初始的请求已经接受，客户应当继续发送请求的其余部分。）")]),t._v(" "),a("p",[t._v("HTTP/2（超文本传输协议第 2 版，最初命名为 HTTP 2.0），是 HTTP 协议的的第二个主要版本，使用于万维网。HTTP/2 是 HTTP 协议自 1999 年 HTTP 1.1 发布后的首个更新，主要基于 SPDY 协议（是 Google 开发的基于 TCP 的应用层协议，用以最小化网络延迟，提升网络速度，优化用户的网络使用体验）。")]),t._v(" "),a("p",[t._v("与 HTTP 1.1 相比，主要区别包括")]),t._v(" "),a("ul",[a("li",[t._v("HTTP/2 采用二进制格式而非文本格式")]),t._v(" "),a("li",[t._v("HTTP/2 是完全多路复用的，而非有序并阻塞的——只需一个连接即可实现并行")]),t._v(" "),a("li",[t._v("使用报头压缩，HTTP/2 降低了开销")]),t._v(" "),a("li",[t._v("HTTP/2 让服务器可以将响应主动“推送”到客户端缓存中")])]),t._v(" "),a("p",[t._v("解析：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("状态码")]),t._v(" "),a("th",[t._v("类别")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1xx")]),t._v(" "),a("td",[t._v("Informational（信息状态码）")]),t._v(" "),a("td",[t._v("接受请求正在处理")])]),t._v(" "),a("tr",[a("td",[t._v("2xx")]),t._v(" "),a("td",[t._v("Success（成功状态码）")]),t._v(" "),a("td",[t._v("请求正常处理完毕")])]),t._v(" "),a("tr",[a("td",[t._v("3xx")]),t._v(" "),a("td",[t._v("Redirection（重定向状态码）")]),t._v(" "),a("td",[t._v("需要附加操作已完成请求")])]),t._v(" "),a("tr",[a("td",[t._v("4xx")]),t._v(" "),a("td",[t._v("Client Error（客户端错误状态码）")]),t._v(" "),a("td",[t._v("服务器无法处理请求")])]),t._v(" "),a("tr",[a("td",[t._v("5xx")]),t._v(" "),a("td",[t._v("Server Error（服务器错误状态码）")]),t._v(" "),a("td",[t._v("服务器处理请求出错")])])])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/938",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_2-http1-1-时如何复用-tcp-连接-网易"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-http1-1-时如何复用-tcp-连接-网易"}},[t._v("#")]),t._v(" 2. http1.1 时如何复用 tcp 连接（网易）")]),t._v(" "),a("p",[t._v("答案：在发送 http 的请求头中设置 Connection: keep-alive")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/939",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_3-http-请求的整个过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-http-请求的整个过程"}},[t._v("#")]),t._v(" 3. Http 请求的整个过程")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("简洁版： 1.域名解析 --\x3e 2.发起 TCP 的 3 次握手 --\x3e 3.建立 TCP 连接后发起 http 请求 --\x3e 4.服务器响应 http 请求，浏览器得到 html 代码 --\x3e 5.浏览器解析 html 代码，并请求 html 代码中的资源（如 js、css、图片等） --\x3e 6.浏览器对页面进行渲染呈现给用户")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/940",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_4-http-缓存配置怎么设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-http-缓存配置怎么设置"}},[t._v("#")]),t._v(" 4. http 缓存配置怎么设置")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("前端设置 http 缓存,前端设置 html 页面缓存方法：静态的 html 页面想要设置使用缓存需要通过 HTTP 的 META 设置 expires 和 cache-control")]),t._v(" "),a("p",[t._v("设置如下网页元信息:")]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Cache-Control"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("max-age=7200"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Expires"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Mon, 20 Jul 2013 23:00:00 GMT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("解答:\ncache-control：||no-cache||no-store||max-age")]),t._v(" "),a("p",[t._v("1.no-cache：")]),t._v(" "),a("p",[t._v("表面意为“数据内容不被缓存”，而实际数据是被缓存到本地的，只是每次请求时候直接绕过缓存这一环节直接向服务器请求最新资源，由于浏览器解释不一样，")]),t._v(" "),a("p",[t._v("例如 ie 中我们设置了 no-cache 之后，请求虽然不会直接使用缓存，但是还会用缓存数据与服务器数据进行一致性检测(也就是说还是有几率会用到缓存的),")]),t._v(" "),a("p",[t._v("firefox 中则完全无视 no-cache 存在，详细解释见 no-store;")]),t._v(" "),a("p",[t._v("2.no-store：")]),t._v(" "),a("p",[t._v("指示缓存不存储此次请求的响应部分。与 no-cache 比较来说，一个是不用缓存，一个是不存储缓存;按理来说这个设置更加粗暴直接禁用缓存，")]),t._v(" "),a("p",[t._v("但是具体实现起来 浏览器之间差异却特别大，一般不会直接用该字段进行设置，不过 no-store 是为了防止缓存被恶意修改存储路径导致信息被泄露而设置的，")]),t._v(" "),a("p",[t._v("毕竟有它的用处，在 firefox 中实现缓存是通过文件另存为将缓存副本保存到本地，直接利用 no-cache 对其是无效的，如果加上 no-store 设置的话 则可以起到与 no-cache 一样的效果;")]),t._v(" "),a("p",[t._v("即：cache-control:no-cache,no-store;可以确保在支持 http1.1 版本中各大浏览器回车后退刷新无缓存；")]),t._v(" "),a("p",[t._v("再加上 Pragma: no-cache 设置兼容版本 1.0 即可(不过为了防止一致性检测时候的万一我们还是最好加上一致性检测的内容，如下所示几种方式)；")]),t._v(" "),a("p",[t._v("3.max-age：")]),t._v(" "),a("p",[t._v("例如 Cache-control: max-age=3；表示此次请求成功后 3 秒之内发送同样请求不会去服务器重新请求，而是使用本地缓存；同样我们如果设置 max-age=0 表示立即抛弃缓存直接发送请求到服务器")]),t._v(" "),a("p",[t._v("以下内容来自:http://www.runoob.com/tags/att-meta-http-equiv.html")]),t._v(" "),a("p",[t._v("HTML ")]),a("meta"),t._v(" http-equiv 属性\nHTML meta 标签参考手册 HTML "),a("meta"),t._v(" 标签"),a("p"),t._v(" "),a("p",[t._v("实例\n每隔 30 秒刷新一次文档：")]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("head")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("refresh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("30"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("head")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("扩展：")]),t._v(" "),a("p",[t._v("与缓存有关的 header\n我们来看看每个 header 的具体含义。")]),t._v(" "),a("ul",[a("li",[t._v("Request")])]),t._v(" "),a("p",[t._v('Cache-Control: max-age=0 以秒为单位\nIf-Modified-Since: Mon, 19 Nov 2012 08:38:01 GMT 缓存文件的最后修改时间。\nIf-None-Match: "0693f67a67cc1:0" 缓存文件的 Etag 值\nCache-Control: no-cache 不使用缓存\nPragma: no-cache 不使用缓存')]),t._v(" "),a("ul",[a("li",[t._v("Response")])]),t._v(" "),a("p",[t._v('Cache-Control: public 响应被缓存，并且在多用户间共享，  （公有缓存和私有缓存的区别，请看另一节）\nCache-Control: private 响应只能作为私有缓存，不能在用户之间共享\nCache-Control:no-cache 提醒浏览器要从服务器提取文档进行验证\nCache-Control:no-store 绝对禁止缓存（用于机密，敏感文件）\nCache-Control: max-age=60 60 秒之后缓存过期（相对时间）\nDate: Mon, 19 Nov 2012 08:39:00 GMT 当前 response 发送的时间\nExpires: Mon, 19 Nov 2012 08:40:01 GMT 缓存过期的时间（绝对时间）\nLast-Modified: Mon, 19 Nov 2012 08:38:01 GMT 服务器端文件的最后修改时间\nETag: "20b1add7ec1cd1:0" 服务器端文件的 Etag 值')]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/941",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_5-常见的浏览器端的存储技术有哪些-以及它们的优缺点和使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-常见的浏览器端的存储技术有哪些-以及它们的优缺点和使用场景"}},[t._v("#")]),t._v(" 5. 常见的浏览器端的存储技术有哪些， 以及它们的优缺点和使用场景？")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("h4",{attrs:{id:"_1-cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-cookie"}},[t._v("#")]),t._v(" 1. cookie")]),t._v(" "),a("p",[t._v("h5 之前，存储主要用 cookies，缺点是在请求头上带着数据，导致流量增加。大小限制 4k")]),t._v(" "),a("p",[t._v("操作方式：")]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v('document.cookie = "username=John Doe; expires=Thu, 18 Dec 2013 12:00:00\nGMT;path=/" // 设置 cookie document.cookie = "username=; expires=Thu, 01 Jan\n1970 00:00:00 GMT" // 删除 cookie\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("设置 cookie 的方法比较简单，其中有几个参数可以添加")]),t._v(" "),a("p",[t._v("expires\n过期时间，当过了到期日期时，浏览器会自动删除该 cookie，如果想删除一个 cookie，只需要把它过期时间设置成过去的时间即可\n比如希望设置过期时间一年：new Date().getTime() + 365 _ 24 _ 60 _ 60 _ 1000")]),t._v(" "),a("p",[t._v("如果不设置过期时间，则表示这个 cookie 生命周期为浏览器会话期间，只要关闭浏览器窗口，cookie 就消失了。")]),t._v(" "),a("p",[t._v("path\n路径，值可以是一个目录，或者是一个路径。")]),t._v(" "),a("p",[t._v("如果 cc.com/test/index.html 建立了一个 cookie，那么在 cc.com/test/目录里的所有页面，以及该目录下面任何子目录里的页面都可以访问这个 cookie。因此在 cc.com/test/test2/test3 里的任何页面都可以访问 cc.com/test/index.html 建立的 cookie。若 cc.com/test/ 若想访问 cc.com/test/index.html 设置的 cookes，需要把 cookies 的 path 属性设置成“/”。\n在指定路径的时候，凡是来自同一服务器，URL 里有相同路径的所有 WEB 页面都可以共享 cookies。")]),t._v(" "),a("p",[t._v('domain\n主机名，是指同一个域下的不同主机，例如：www.baidu.com 和 map.baidu.com 就是两个不同的主机名。默认情况下，一个主机中创建的 cookie 在另一个主机下是不能被访问的，但可以通过 domain 参数来实现对其的控制：document.cookie = "name=value;domain=.baidu.com"\n这样，所有*.baidu.com 的主机都可以访问该 cookie。')]),t._v(" "),a("h4",{attrs:{id:"_2-localstorage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-localstorage"}},[t._v("#")]),t._v(" 2. localStorage")]),t._v(" "),a("p",[t._v("以键值对(Key-Value)的方式存储，永久存储，永不失效，除非手动删除。IE8+支持，每个域名限制 5M")]),t._v(" "),a("p",[t._v("打开同域的新页面也能访问得到")]),t._v(" "),a("p",[t._v("操作方式：")]),t._v(" "),a("p",[t._v("window.localStorage.username = 'hehe' // 设置\nwindow.localStorage.setItem('username', 'hehe') // 设置\nwindow.localStorage.getItem('username') // 读取\nwindow.localStorage.removeItem('username') // 删除\nwindow.localStorage.key(1) // 读取索引为 1 的值\nwindow.localStorage.clear() // 清除所有\n可以存储数组、数字、对象等可以被序列化为字符串的内容")]),t._v(" "),a("h4",{attrs:{id:"_3-sessionstorage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-sessionstorage"}},[t._v("#")]),t._v(" 3. sessionStorage")]),t._v(" "),a("p",[t._v("sessionStorage 操作的方法与 localStroage 是一样的，区别在于 sessionStorage 在关闭页面后即被清空，而 localStorage 则会一直保存。很多时候数据只需要在用户浏览一组页面期间使用，关闭窗口后数据就可以丢弃了，这种情况使用 sessionStorage 就比较方便。")]),t._v(" "),a("p",[t._v("注意，刷新页面 sessionStorage 不会清除，但是打开同域新页面访问不到")]),t._v(" "),a("h4",{attrs:{id:"_4-cookie、localstorage、sessionstorage-之间的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-cookie、localstorage、sessionstorage-之间的区别"}},[t._v("#")]),t._v(" 4. cookie、localStorage、sessionStorage 之间的区别")]),t._v(" "),a("p",[t._v("他们都是保存在浏览器端的存储方式，他们之间的区别：")]),t._v(" "),a("p",[t._v("cookie 数据始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器和服务器间来回传递。而 sessionStorage 和 localStorage 不会自动把数据发给服务器，仅在本地保存。cookie 数据还有路径（path）的概念，可以限制 cookie 只属于某个路径下。\n存储大小限制不同，cookie 数据不能超过 4k，同时因为每次 http 请求都会携带 cookie，所以 cookie 只适合保存很小的数据，如会话标识。sessionStorage 和 localStorage 虽然也有存储大小的限制，但比 cookie 大得多，可以达到 5M 或更大。\n数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie 只在设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭。\n作用域不同，sessionStorage 不在不同的浏览器页面中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie 也是在所有同源窗口中都是共享的。\nWeb Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。\nWeb Storage 的 api 接口使用更方便，cookie 的原生接口不友好，需要自己封装。")]),t._v(" "),a("h4",{attrs:{id:"_5-安全性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-安全性"}},[t._v("#")]),t._v(" 5. 安全性")]),t._v(" "),a("p",[t._v("需要注意的是，不是什么数据都适合放在 Cookie、localStorage 和 sessionStorage 中的，因为它们保存在本地容易被篡改，使用它们的时候，需要时刻注意是否有代码存在 XSS 注入的风险。所以千万不要用它们存储你系统中的敏感数据。")]),t._v(" "),a("h4",{attrs:{id:"_6-在浏览器多个-tab-页中-cookie、localstorage-可以共享数据-sessionstorage-仅保存在当前-tab-页中不能共享"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-在浏览器多个-tab-页中-cookie、localstorage-可以共享数据-sessionstorage-仅保存在当前-tab-页中不能共享"}},[t._v("#")]),t._v(" 6. 在浏览器多个 tab 页中，cookie、localStorage 可以共享数据，sessionStorage 仅保存在当前 tab 页中不能共享")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/942",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_6-在-http-响应-header-中-set-cookie-选项有哪些-分别代表什么含义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-在-http-响应-header-中-set-cookie-选项有哪些-分别代表什么含义"}},[t._v("#")]),t._v(" 6. 在 HTTP 响应 Header 中，set-cookie 选项有哪些，分别代表什么含义？")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("Set-Cookie: "),a("code",[t._v("<cookie-name>=<cookie-value>")])]),t._v(" "),a("ul",[a("li",[t._v("Expires="),a("code",[t._v("<date>")])]),t._v(" "),a("li",[t._v("Max-Age="),a("code",[t._v("<non-zero-digit>")])]),t._v(" "),a("li",[t._v("Domain="),a("code",[t._v("<domain-value>")])]),t._v(" "),a("li",[t._v("Path="),a("code",[t._v("<path-value>")])]),t._v(" "),a("li",[t._v("Secure")]),t._v(" "),a("li",[t._v("HttpOnly")]),t._v(" "),a("li",[t._v("SameSite=Strict")]),t._v(" "),a("li",[t._v("SameSite=Lax")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 需要设置cookie的值(name不能使用";"和","号),有多个name值时用";"分隔例如：name1=name1;name2=name2;name3=name3')]),t._v("\n\nexpires"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//cookie的有效期限,格式为:expires="Wdy,DD-Mon-YYYY HH:MM:SS"')]),t._v("\n\npath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//设置cookie支持的路径,如果path是一个路径，则cookie对这个目录下的所有文件及子目录生效，例如：path="/cgi-bin/"，如果path是一个文件，则cookie指对这个文件生效，例如：path="/cgi-bin/cookie.cgi"')]),t._v("\n\ndomain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//对cookie生效的域名，例如：domain="gzdzw.51.net"')]),t._v("\n\nsecure"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果给出此标志，表示cookie只能通过SSL协议的https服务器来传递,cookie的接收是通过设置环境变量HTTP_COOKIE来实现的，CGI程序可以通过检索该变量获取cookie信息")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("解析：Cookie 相关的 Http 头")]),t._v(" "),a("p",[t._v("有两个 Http 头部和 Cookie 有关：Set-Cookie 和 Cookie")]),t._v(" "),a("ul",[a("li",[t._v("Set-Cookie 由服务器发送，它包含在响应请求的头部中。它用于在客户端创建一个 Cookie")]),t._v(" "),a("li",[t._v("Cookie 头由客户端发送，包含在 HTTP 请求的头部中。注意，只有 cookie 的 domain 和 path 与请求的 URL 匹配才会发送这个 cookie。")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/943",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_7-何为跨域-跨域请求数据有几种方式-图片-脚本-等资源有什么跨域问题。如何解决-跨域请求时如何携带-cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-何为跨域-跨域请求数据有几种方式-图片-脚本-等资源有什么跨域问题。如何解决-跨域请求时如何携带-cookie"}},[t._v("#")]),t._v(" 7. 何为跨域？ 跨域请求数据有几种方式？图片/脚本 等资源有什么跨域问题。如何解决？跨域请求时如何携带 cookie")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("h4",{attrs:{id:"_1-何为跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-何为跨域"}},[t._v("#")]),t._v(" 1. 何为跨域？")]),t._v(" "),a("ul",[a("li",[t._v("由于浏览器同源策略，凡是发送请求 url 的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。")]),t._v(" "),a("li",[t._v("同源策略限制了一个源(origin)中加载文本或脚本与来自其它源(origin)中资源的交互方式。同源指的是协议、域名、端口相同，同源策略是一种安全协议。")])]),t._v(" "),a("h4",{attrs:{id:"_2-跨域请求数据有几种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-跨域请求数据有几种方式"}},[t._v("#")]),t._v(" 2.跨域请求数据有几种方式？")]),t._v(" "),a("p",[t._v("（1）JSONP 动态创建 script 标签")]),t._v(" "),a("p",[t._v("但缺点是只支持 get 请求，并且很难判断请求是否失败（一般通过判断请求是否超时）。")]),t._v(" "),a("p",[t._v("（2）Proxy 代理")]),t._v(" "),a("p",[t._v("这种方式首先将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。")]),t._v(" "),a("p",[t._v("（3）CORS 跨域")]),t._v(" "),a("p",[t._v("是现代浏览器提供的一种跨域请求资源的方法，需要客户端和服务器端的同时支持。整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信。")]),t._v(" "),a("h4",{attrs:{id:"_3-图片-脚本-等资源有什么跨域问题。如何解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-图片-脚本-等资源有什么跨域问题。如何解决"}},[t._v("#")]),t._v(" 3.图片/脚本 等资源有什么跨域问题。如何解决？")]),t._v(" "),a("h4",{attrs:{id:"_4-跨域请求时如何携带-cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-跨域请求时如何携带-cookie"}},[t._v("#")]),t._v(" 4.跨域请求时如何携带 cookie")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/944",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_8-简要描述-https-的安全机制-以及在-web-服务工程实践中需要注意的问题。描述-http2-和-https-的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-简要描述-https-的安全机制-以及在-web-服务工程实践中需要注意的问题。描述-http2-和-https-的关系"}},[t._v("#")]),t._v(" 8. 简要描述 HTTPS 的安全机制，以及在 web 服务工程实践中需要注意的问题。描述 http2 和 https 的关系")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("ul",[a("li",[t._v("HTTP 协议通常承载于 TCP 协议之上，在 HTTP 和 TCP 之间添加一个安全协议层（SSL 或 TSL），这个时候，就成了我们常说的 HTTPS。")]),t._v(" "),a("li",[t._v("默认 HTTP 的端口号为 80，HTTPS 的端口号为 443。")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/945",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_9-什么是点击劫持-如何防范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-什么是点击劫持-如何防范"}},[t._v("#")]),t._v(" 9. 什么是点击劫持？如何防范？")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("什么点击劫持？最常见的是恶意网站使用 <iframe> 标签把我方的一些含有重要信息类如交易的网页嵌入进去，然后把 iframe 设置透明，用定位的手段的把一些引诱用户在恶意网页上点击。这样用户不知不觉中就进行了某些不安全的操作。\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("有两种方式可以防范：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v('使用 JS 防范：\nif (top.location.hostname !== self.location.hostname) {\nalert("您正在访问不安全的页面，即将跳转到安全页面！");\ntop.location.href = self.location.href;\n}')])]),t._v(" "),a("li",[a("p",[t._v("使用 HTTP 头防范：\n通过配置 nginx 发送 X-Frame-Options 响应头，这样浏览器就会阻止嵌入网页的渲染。更详细的可以查阅 MDN 上关于 X-Frame-Options 响应头的内容。\nadd_header X-Frame-Options SAMEORIGIN;")])])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/946",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_10-什么是-csrf-怎么造成的-有什么防御方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-什么是-csrf-怎么造成的-有什么防御方法"}},[t._v("#")]),t._v(" 10. 什么是 CSRF, 怎么造成的，有什么防御方法？")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("CSRF 概念：CSRF 跨站点请求伪造(Cross—Site Request Forgery)，跟 XSS 攻击一样，存在巨大的危害性，你可以这样来理解：\n攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中 Web A 为存在 CSRF 漏洞的网站，Web B 为攻击者构建的恶意网站，User C 为 Web A 网站的合法用户。")]),t._v(" "),a("p",[t._v("CSRF 攻击攻击原理及过程如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("   1. 用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；\n\n   2.在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；\n\n   3. 用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；\n\n   4. 网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；\n\n\n   5. 浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。\n")])])]),a("p",[t._v("防御 CSRF 攻击：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("   目前防御 CSRF 攻击主要有三种策略：验证 HTTP Referer 字段；在请求地址中添加 token 并验证；在 HTTP 头中自定义属性并验证。\n")])])]),a("p",[t._v("解析：")]),t._v(" "),a("p",[t._v("CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者 Session Riding，通常缩写为 CSRF 或者 XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与 XSS 非常不同，XSS 利用站点内的信任用户，而 CSRF 则通过伪装来自受信任用户的请求来利用受信任的网站。与 XSS 攻击相比，CSRF 攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比 XSS 更具危险性。")]),t._v(" "),a("h3",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("ul",[a("li",[t._v("依靠用户标识危害网站")]),t._v(" "),a("li",[t._v("利用网站对用户标识的信任")]),t._v(" "),a("li",[t._v("欺骗用户的浏览器发送 HTTP 请求给目标站点")]),t._v(" "),a("li",[t._v("另外可以通过 IMG 标签会触发一个 GET 请求，可以利用它来实现 CSRF 攻击。")])]),t._v(" "),a("h3",{attrs:{id:"防御"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防御"}},[t._v("#")]),t._v(" 防御")]),t._v(" "),a("ul",[a("li",[t._v("通过 referer、token 或者验证码来检测用户提交。")]),t._v(" "),a("li",[t._v("尽量不要在页面的链接中暴露用户隐私信息。")]),t._v(" "),a("li",[t._v("对于用户修改删除等操作最好都使用 post 操作 。")]),t._v(" "),a("li",[t._v("避免全站通用的 cookie，严格设置 cookie 的域。")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/947",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_11-请简述如何在-html-中开启和关闭-dns-预读取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-请简述如何在-html-中开启和关闭-dns-预读取"}},[t._v("#")]),t._v(" 11. 请简述如何在 HTML 中开启和关闭 DNS 预读取?")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("h3",{attrs:{id:"dns-预读取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dns-预读取"}},[t._v("#")]),t._v(" DNS 预读取")]),t._v(" "),a("h4",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念：")]),t._v(" "),a("p",[t._v("浏览器主动去执行域名解析功能。")]),t._v(" "),a("p",[t._v("当浏览网页时，浏览器会对网页中的域名进行解析缓存，这样当单击当前网页中的连接时就无需进行 DNS 解析，减少用户等待时间，提高用户体验。")]),t._v(" "),a("h4",{attrs:{id:"范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#范围"}},[t._v("#")]),t._v(" 范围：")]),t._v(" "),a("p",[t._v("图片、CSS、JS 或 html 上的 link 等 URL。")]),t._v(" "),a("h4",{attrs:{id:"开关和使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开关和使用"}},[t._v("#")]),t._v(" 开关和使用：")]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("x-dns-prefetch-control"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("off"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("dns-prefetch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("//www.spreadfirefox.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h4",{attrs:{id:"前端优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端优化"}},[t._v("#")]),t._v(" 前端优化：")]),t._v(" "),a("p",[t._v("减少 DNS 请求次数；")]),t._v(" "),a("p",[t._v("进行 DNS 预获取；")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/948",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_12-什么是回源-域名回源的含义是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-什么是回源-域名回源的含义是什么"}},[t._v("#")]),t._v(" 12. 什么是回源？域名回源的含义是什么？")]),t._v(" "),a("p",[t._v("答案：在搜索引擎中所谓的域名回源就是搜索引擎的蜘蛛在爬行的过程中直接抓取源地址上的内容而不是存在各个节点（CDN）上的缓存内容。")]),t._v(" "),a("p",[t._v("解析：")]),t._v(" "),a("p",[t._v("CDN 回源率计算方法")]),t._v(" "),a("h4",{attrs:{id:"如何计算回源比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何计算回源比"}},[t._v("#")]),t._v(" 如何计算回源比？")]),t._v(" "),a("p",[t._v("回源比分为回源请求数比例及回源流量比例两种")]),t._v(" "),a("p",[a("strong",[t._v("回源请求数比")]),t._v("：统计数据来自所有边缘节点上的请求记录，其中，对于没有缓存或缓存过期（可缓存）的请求以及不可缓存的请求，均计入回源请求中，其他直接命中缓存的，则为命中请求。")]),t._v(" "),a("p",[a("strong",[t._v("回源流量比")]),t._v("：回源流量是回源请求文件大小产生的流量和请求本身产生的流量 回源流量比=回源流量/回源流量+用户请求访问的流量")]),t._v(" "),a("p",[t._v("源站内容有更新的时候，源站主动把内容推送到 CDN 节点。\n常规的 CDN 都是回源的。即：当有用户访问某一个 URL 的时候，如果被解析到的那个 CDN 节点没有缓存响应的内容，或者是缓存已经到期，就会回源站去获取。如果没有人访问，那么 CDN 节点不会主动去源站拿的。")]),t._v(" "),a("p",[t._v("回源域名一般是 cdn 领域的专业术语，通常情况下，是直接用 ip 进行回源的，但是如果客户源站有多个 ip，并且 ip 地址会经常变化，对于 cdn 厂商来说，为了避免经常更改配置（回源 ip），会采用回源域名方式进行回源，这样即使源站的 ip 变化了，也不影响原有的配置。")]),t._v(" "),a("p",[t._v("CDN 本来是给我们的网站加速的，但是有时会因为不合适的回源策略给服务器带来负担，只有选择正确的策略才能给自己的网站带来更高的访问效率。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/949",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_13-https-实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-https-实现原理"}},[t._v("#")]),t._v(" 13. https 实现原理")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("HTTPS 在通讯过程中的原理，总共分为 8 步\nSTEP 1: 客户端发起 HTTPS 请求\nSTEP 2: 服务端的配置\nSTEP 3: 传送证书\nSTEP 4: 客户端解析证书\nSTEP 5: 传送加密信息\nSTEP 6: 服务端解密信息\nSTEP 7: 传输加密后的信息\nSTEP 8: 客户端解密信息")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/950",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_14-html5-的离线储存怎么使用-工作原理能不能解释一下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-html5-的离线储存怎么使用-工作原理能不能解释一下"}},[t._v("#")]),t._v(" 14. HTML5 的离线储存怎么使用，工作原理能不能解释一下")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("如何使用：只要在在页面头部加入 mainfest 的属性就行了。")]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token doctype"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<!")]),a("span",{pre:!0,attrs:{class:"token doctype-tag"}},[t._v("DOCTYPE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token name"}},[t._v("html")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("manifest")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("cache.manifest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("html")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("工作原理：HTML5 的离线存储是基于一个新建的.appcache 文件的缓存机制（不是存储技术），通过这个文件上的解析清单离线存储资源，这些资源就像 cookie 一样被存储下来。当无网时，浏览器会通过被离线存储的数据进行展示")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/951",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_15-xss"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-xss"}},[t._v("#")]),t._v(" 15. XSS")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("h3",{attrs:{id:"xss-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss-是什么"}},[t._v("#")]),t._v(" XSS 是什么")]),t._v(" "),a("p",[t._v("XSS 是一种经常出现在 web 应用中的计算机安全漏洞，它允许恶意 web 用户将代码植入到提供给其它用户使用的页面中。\n比如这些代码包括 HTML 代码和客户端脚本。攻击者利用 XSS 漏洞旁路掉访问控制——例如同源策略(same origin policy)。\n这种类型的漏洞由于被黑客用来编写危害性更大的网络钓鱼(Phishing)攻击而变得广为人知。\n对于跨站脚本攻击，黑客界共识是：跨站脚本攻击是新型的“缓冲区溢出攻击“，而 JavaScript 是新型的“ShellCode”。")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("示例：\n<script>alert(document.cookie)<\/script>\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h3",{attrs:{id:"特点-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点-2"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("p",[t._v("能注入恶意的 HTML/JavaScript 代码到用户浏览的网页上，从而达到 Cookie 资料窃取、会话劫持、钓鱼欺骗等攻击。\n<攻击代码不一定（非要）在 "),a("script"),t._v(" 中>")]),t._v(" "),a("h3",{attrs:{id:"原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原因"}},[t._v("#")]),t._v(" 原因")]),t._v(" "),a("ul",[a("li",[t._v("Web 浏览器本身的设计不安全。浏览器能解析和执行 JS 等代码，但是不会判断该数据和程序代码是否恶意。")]),t._v(" "),a("li",[t._v("输入和输出是 Web 应用程序最基本的交互，而且网站的交互功能越来越丰富。如果在这过程中没有做好安全防护，很容易会出现 XSS 漏洞。")]),t._v(" "),a("li",[t._v("程序员水平参差不齐，而且大都没有过正规的安全培训，没有相关的安全意识。")]),t._v(" "),a("li",[t._v("XSS 攻击手段灵活多变。")])]),t._v(" "),a("h3",{attrs:{id:"危害"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#危害"}},[t._v("#")]),t._v(" 危害")]),t._v(" "),a("ul",[a("li",[t._v("盗取各类用户帐号，如机器登录帐号、用户网银帐号、各类管理员帐号")]),t._v(" "),a("li",[t._v("控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力")]),t._v(" "),a("li",[t._v("盗窃企业重要的具有商业价值的资料")]),t._v(" "),a("li",[t._v("非法转账")]),t._v(" "),a("li",[t._v("强制发送电子邮件")]),t._v(" "),a("li",[t._v("网站挂马")]),t._v(" "),a("li",[t._v("控制受害者机器向其它网站发起攻击")])]),t._v(" "),a("h3",{attrs:{id:"如何防范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何防范"}},[t._v("#")]),t._v(" 如何防范")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('- 将重要的 cookie 标记为 http only, 这样的话 Javascript 中的 document.cookie 语句就不能获取到 cookie 了.\n- 表单数据规定值的类型，例如：年龄应为只能为 int、name 只能为字母数字组合。。。。\n- 对数据进行 Html Encode 处理\n- 过滤或移除特殊的 Html 标签， 例如: <script>, <iframe> , &lt; for <, &gt; for >, &quot for\n- 过滤 JavaScript 事件的标签。例如 "onclick=", "onfocus" 等等。\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("解析：参考资料：\nhttps://www.cnblogs.com/phpstudy2015-6/p/6767032.html\nhttps://www.cnblogs.com/443855539-wind/p/6055816.html\nhttps://baike.baidu.com/item/XSS%E6%94%BB%E5%87%BB/954065?fr=aladdin")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/952",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_16-csrf-cookie-问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-csrf-cookie-问题"}},[t._v("#")]),t._v(" 16. CSRF cookie 问题？")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/953",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_17-cdn-原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-cdn-原理"}},[t._v("#")]),t._v(" 17. CDN 原理")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/954",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_18-如何启动浏览器硬件加速-小-hack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-如何启动浏览器硬件加速-小-hack"}},[t._v("#")]),t._v(" 18. 如何启动浏览器硬件加速，小 Hack")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/955",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_19-什么是-cookie-隔离-或者说-请求资源的时候不要让它带-cookie-怎么做"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-什么是-cookie-隔离-或者说-请求资源的时候不要让它带-cookie-怎么做"}},[t._v("#")]),t._v(" 19.什么是 Cookie 隔离？（或者说：请求资源的时候不要让它带 cookie 怎么做）")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/956",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_20-三次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-三次握手"}},[t._v("#")]),t._v(" 20.三次握手")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("TCP 协议是面向连接的通信协议，即在传输数据前先在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。")]),t._v(" "),a("p",[t._v("在 TCP 连接中必须要明确客户端与服务器端，由客户端向服务端发出连接请求，每次连接的创建都需要经过“三次握手”")]),t._v(" "),a("p",[t._v("第一次握手，客户端向服务器端发送一个带 SYN 标志的数据包，等待服务器确认")]),t._v(" "),a("p",[t._v("第二次握手，服务器端向客户端回传一个带有 SYN/ACK 标志的数据包，通知客户端收到了连接请求")]),t._v(" "),a("p",[t._v("第三次握手，客户端再次向服务器端回传一个带 ACK 标志的数据包，确认连接，“握手”结束。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/957",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_21-四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-四次挥手"}},[t._v("#")]),t._v(" 21.四次挥手")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("1、客户端向服务器发送一个断开连接的请求（不早了，我该走了）；")]),t._v(" "),a("p",[t._v("2、服务器接到请求后发送确认收到请求的信号（知道了）；")]),t._v(" "),a("p",[t._v("3、服务器向客户端发送断开通知（我也该走了）；")]),t._v(" "),a("p",[t._v("4、客户端接到断开通知后断开连接并反馈一个确认信号（嗯，好的），服务器收到确认信号后断开连接；")]),t._v(" "),a("p",[t._v("解析：")]),t._v(" "),a("p",[t._v("第一次挥手：主动关闭方发送一个 FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不会再给你发数据了(当然，在 fin 包之前发送出去的数据，如果没有收到对应的 ack 确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可 以接受数据。")]),t._v(" "),a("p",[t._v("第二次挥手：被动关闭方收到 FIN 包后，发送一个 ACK 给对方，确认序号为收到序号+1（与 SYN 相同，一个 FIN 占用一个序号）。")]),t._v(" "),a("p",[t._v("第三次挥手：被动关闭方发送一个 FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。")]),t._v(" "),a("p",[t._v("第四次挥手：主动关闭方收到 FIN 后，发送一个 ACK 给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/958",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_22-线程与进程的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22-线程与进程的区别"}},[t._v("#")]),t._v(" 22.线程与进程的区别")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("a. 一个程序至少有一个进程，一个进程至少有一个线程")]),t._v(" "),a("p",[t._v("b. 线程的划分尺度小于进程，使得多线程程序的并发性高")]),t._v(" "),a("p",[t._v("c. 进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率")]),t._v(" "),a("p",[t._v("d. 每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制")]),t._v(" "),a("p",[t._v("e. 多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/959",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_23-web-应用从服务器主动推送-data-到客户端有那些方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-web-应用从服务器主动推送-data-到客户端有那些方式"}},[t._v("#")]),t._v(" 23. WEB 应用从服务器主动推送 Data 到客户端有那些方式？")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("a. html5 websoket")]),t._v(" "),a("p",[t._v("b. WebSocket 通过 Flash")]),t._v(" "),a("p",[t._v("c. XHR 长时间连接")]),t._v(" "),a("p",[t._v("d. XHR Multipart Streaming")]),t._v(" "),a("p",[t._v("e. 不可见的 Iframe")]),t._v(" "),a("p",[t._v("f. 标签的长时间连接(可跨域)")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/960",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_24-http-的几种请求方法用途"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-http-的几种请求方法用途"}},[t._v("#")]),t._v(" 24.HTTP 的几种请求方法用途")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/961",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_25-常见-web-安全及防护原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25-常见-web-安全及防护原理"}},[t._v("#")]),t._v(" 25.常见 web 安全及防护原理")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/962",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_26-为什么要有同源限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_26-为什么要有同源限制"}},[t._v("#")]),t._v(" 26.为什么要有同源限制？")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/963",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_27-域名发散和域名收敛是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_27-域名发散和域名收敛是什么"}},[t._v("#")]),t._v(" 27.域名发散和域名收敛是什么？")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("PC 时代为了突破浏览器的域名并发限制。有了域名发散。\n浏览器有并发限制，是为了防止DDOS攻击。")]),t._v(" "),a("ul",[a("li",[t._v("域名收敛：就是将静态资源放在一个域名下。减少DNS解析的开销。")]),t._v(" "),a("li",[t._v("域名发散：是将静态资源放在多个子域名下，就可以多线程下载，提高并行度，使客户端加载静态资源更加迅速。")])]),t._v(" "),a("p",[t._v("域名发散是pc端为了利用浏览器的多线程并行下载能力。而域名收敛多用与移动端，提高性能，因为dns解析是是从后向前迭代解析，如果域名过多性能会下降，增加DNS的解析开销。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/964",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_28-什么是-https-做什么用的呢-如何开启-https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_28-什么是-https-做什么用的呢-如何开启-https"}},[t._v("#")]),t._v(" 28.什么是 HTTPS，做什么用的呢？如何开启 HTTPS？")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/965",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_29-tcp-和-udp-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_29-tcp-和-udp-的区别"}},[t._v("#")]),t._v(" 29.TCP 和 UDP 的区别")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("TCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个 TCP 连接必须要经过三次“对话”才能建立起来")]),t._v(" "),a("p",[t._v("UDP（User Data Protocol，用户数据报协议）是与 TCP 相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！\nUDP 适用于一次只传送少量数据、对可靠性要求不高的应用环境。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/966",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_30-web-worker-和-websocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_30-web-worker-和-websocket"}},[t._v("#")]),t._v(" 30. Web Worker 和 webSocket")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("worker 主线程:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1.通过 worker = new Worker( url ) 加载一个JS文件来创建一个worker，同时返回一个worker实例。\n\n2.通过worker.postMessage( data ) 方法来向worker发送数据。\n\n3.绑定worker.onmessage方法来接收worker发送过来的数据。\n\n4.可以使用 worker.terminate() 来终止一个worker的执行。\n")])])]),a("p",[t._v("WebSocket 是 Web 应用程序的传输协议，它提供了双向的，按序到达的数据流。他是一个 Html5 协议，WebSocket 的连接是持久的，他通过在客户端和服务器之间保持双工连接，服务器的更新可以被及时推送给客户端，而不需要客户端以一定时间间隔去轮询。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/967",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_31-为什么-https-安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_31-为什么-https-安全"}},[t._v("#")]),t._v(" 31.为什么 HTTPS 安全")]),t._v(" "),a("p",[t._v("答案：因为网络请求需要中间有很多的服务器路由器的转发。中间的节点都可能篡改信息，而如果使用 HTTPS，密钥在你和终点站才有。https 之所以比 http 安全，是因为他利用 ssl/tls 协议传输。它包含证书，卸载，流量转发，负载均衡，页面适配，浏览器适配，refer 传递等。保障了传输过程的安全性")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/968",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_32-sql-注入原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_32-sql-注入原理"}},[t._v("#")]),t._v(" 32.sql 注入原理")]),t._v(" "),a("p",[t._v("答案：就是通过把 SQL 命令插入到 Web 表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令。")]),t._v(" "),a("p",[t._v("总的来说有以下几点：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v('永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双"-"进行转换等。')])]),t._v(" "),a("li",[a("p",[t._v("永远不要使用动态拼装 SQL，可以使用参数化的 SQL 或者直接使用存储过程进行数据查询存取。")])]),t._v(" "),a("li",[a("p",[t._v("永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。")])]),t._v(" "),a("li",[a("p",[t._v("不要把机密信息明文存放，请加密或者 hash 掉密码和敏感的信息。")])])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/969",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_33-xss-原理及防范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_33-xss-原理及防范"}},[t._v("#")]),t._v(" 33.XSS 原理及防范")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("Xss(cross-site scripting)攻击指的是攻击者往 Web 页面里插入恶意 html 标签或者 javascript 代码。比如：攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃取 cookie 中的用户私密信息；或者攻击者在论坛中加一个恶意表单，当用户提交表单的时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/970",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_34-xss-防范方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_34-xss-防范方法"}},[t._v("#")]),t._v(" 34.XSS 防范方法")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("首先代码里对用户输入的地方和变量都需要仔细检查长度和对”<”,”>”,”;”,”’”等字符做过滤；其次任何内容写到页面之前都必须加以 encode，避免不小心把 html tag 弄出来。这一个层面做好，至少可以堵住超过一半的 XSS 攻击。")]),t._v(" "),a("p",[t._v("首先，避免直接在 cookie 中泄露用户隐私，例如 email、密码等等。")]),t._v(" "),a("p",[t._v("其次，通过使 cookie 和系统 ip 绑定来降低 cookie 泄露后的危险。这样攻击者得到的 cookie 没有实际价值，不可能拿来重放。")]),t._v(" "),a("p",[t._v("如果网站不需要再浏览器端对 cookie 进行操作，可以在 Set-Cookie 末尾加上 HttpOnly 来防止 javascript 代码直接获取 cookie 。")]),t._v(" "),a("p",[t._v("尽量采用 POST 而非 GET 提交表单")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/971",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_35-xss-与-csrf-有什么区别吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_35-xss-与-csrf-有什么区别吗"}},[t._v("#")]),t._v(" 35.XSS 与 CSRF 有什么区别吗？")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("XSS 是获取信息，不需要提前知道其他用户页面的代码和数据包。CSRF 是代替用户完成指定的动作，需要知道其他用户页面的代码和数据包。")]),t._v(" "),a("p",[t._v("要完成一次 CSRF 攻击，受害者必须依次完成两个步骤：")]),t._v(" "),a("ul",[a("li",[t._v("登录受信任网站 A，并在本地生成 Cookie。")]),t._v(" "),a("li",[t._v("在不登出 A 的情况下，访问危险网站 B。")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/972",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_36-csrf-的防御"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_36-csrf-的防御"}},[t._v("#")]),t._v(" 36.CSRF 的防御")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("ul",[a("li",[t._v("服务端的 CSRF 方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。")]),t._v(" "),a("li",[t._v("通过验证码的方法")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/973",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_37-请你谈谈-cookie-的弊端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_37-请你谈谈-cookie-的弊端"}},[t._v("#")]),t._v(" 37.请你谈谈 Cookie 的弊端？")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("Cookie")]),t._v("数量和长度的限制。每个 domain 最多只能有 20 条 cookie，每个 cookie 长度不能超过 4KB，否则会被截掉。")]),t._v(" "),a("li",[t._v("安全性问题。如果 cookie 被人拦截了，那人就可以取得所有的 session 信息。即使加密也与事无补，因为拦截者并不需要知道 cookie 的意义，他只要原样转发 cookie 就可以达到目的了。")]),t._v(" "),a("li",[t._v("有些状态不可能保存在客户端。例如，为了防止重复提交表单，我们需要在服务器端保存一个计数器。如果我们把这个计数器保存在客户端，那么它起不到任何作用。")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/974",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_38-http-协议中-header-信息里面-怎么控制页面失效时间-last-modified-cache-control-expires-分别代表什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_38-http-协议中-header-信息里面-怎么控制页面失效时间-last-modified-cache-control-expires-分别代表什么"}},[t._v("#")]),t._v(" 38.HTTP 协议中，header 信息里面，怎么控制页面失效时间（last-modified,cache-control,Expires 分别代表什么）")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/975",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_39-本地存储-local-storage-和-cookies-储存在用户本地终端上的数据-之间的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_39-本地存储-local-storage-和-cookies-储存在用户本地终端上的数据-之间的区别是什么"}},[t._v("#")]),t._v(" 39.本地存储（Local Storage ）和 cookies（储存在用户本地终端上的数据）之间的区别是什么？")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("Cookies:服务器和客户端都可以访问；大小只有 4KB 左右；有有效期，过期后将会删除；")]),t._v(" "),a("p",[t._v("本地存储：只有本地浏览器端可访问数据，服务器不能访问本地存储直到故意通过 POST 或者 GET 的通道发送到服务器；每个域 5MB；没有过期数据，它将保留知道用户从浏览器清除或者使用 Javascript 代码移除")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/976",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_40-accept-和-content-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_40-accept-和-content-type"}},[t._v("#")]),t._v(" 40.Accept 和 Content-Type")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("Accept 请求头用来告知客户端可以处理的内容类型，这种内容类型用 MIME 类型来表示。\n服务器使用 Content-Type 应答头通知客户端它的选择。")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Accept: text/html\nAccept: image/*\nAccept: text/html, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("1.Accept 属于请求头， Content-Type 属于实体头。\nHttp 报头分为通用报头，请求报头，响应报头和实体报头。\n请求方的 http 报头结构：通用报头|请求报头|实体报头\n响应方的 http 报头结构：通用报头|响应报头|实体报头")]),t._v(" "),a("p",[t._v("2.Accept 代表发送端（客户端）希望接受的数据类型。\n比如：Accept：text/xml;\n代表客户端希望接受的数据类型是 xml 类型")]),t._v(" "),a("p",[t._v("Content-Type 代表发送端（客户端|服务器）发送的实体数据的数据类型。\n比如：Content-Type：text/html;\n代表发送端发送的数据格式是 html。")]),t._v(" "),a("p",[t._v("二者合起来，\nAccept:text/xml；\nContent-Type:text/html\n即代表希望接受的数据类型是 xml 格式，本次请求发送的数据的数据格式是 html。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/977",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_41-http-协议缓存机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_41-http-协议缓存机制"}},[t._v("#")]),t._v(" 41.http 协议缓存机制")]),t._v(" "),a("p",[t._v("答案："),a("a",{attrs:{href:"https://segmentfault.com/a/1190000010690320",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/978",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_42-如何处理不让别人盗用你的图片-访问你的服务器资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_42-如何处理不让别人盗用你的图片-访问你的服务器资源"}},[t._v("#")]),t._v(" 42.如何处理不让别人盗用你的图片，访问你的服务器资源")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("ul",[a("li",[t._v("http header, 对 refer 做判断看来源是不是自己的网站，如果不是就拒绝")]),t._v(" "),a("li",[t._v("通过 session 校验，如果不通过特定服务生成 cookie 和 session 就不能请求得到资源")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/979",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_43-http-与-https-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_43-http-与-https-的区别"}},[t._v("#")]),t._v(" 43.Http 与 Https 的区别")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("ul",[a("li",[t._v("HTTP 的 URL 以 http:// 开头，而 HTTPS 的 URL 以 https:// 开头")]),t._v(" "),a("li",[t._v("HTTP 是不安全的，而 HTTPS 是安全的")]),t._v(" "),a("li",[t._v("HTTP 标准端口是 80 ，而 HTTPS 的标准端口是 443")]),t._v(" "),a("li",[t._v("在 OSI 网络模型中，HTTP 工作于应用层，而 HTTPS 的安全传输机制工作在传输层")]),t._v(" "),a("li",[t._v("HTTP 无法加密，而 HTTPS 对传输的数据进行加密")]),t._v(" "),a("li",[t._v("HTTP 无需证书，而 HTTPS 需要 CA 机构 wosign 的颁发的 SSL 证书")])]),t._v(" "),a("p",[t._v("解析："),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/33778904",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/980",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_44-什么是-http-协议无状态协议-怎么解决-http-协议无状态协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_44-什么是-http-协议无状态协议-怎么解决-http-协议无状态协议"}},[t._v("#")]),t._v(" 44.什么是 Http 协议无状态协议?怎么解决 Http 协议无状态协议?")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("无状态协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息也就是说，\n当客户端一次 HTTP 请求完成以后，客户端再发送一次 HTTP 请求，HTTP 并不知道当前客户端是一个”老用户“。")]),t._v(" "),a("p",[t._v("可以使用 Cookie 来解决无状态的问题，Cookie 就相当于一个通行证，第一次访问的时候给客户端发送一个 Cookie，\n当客户端再次来的时候，拿着 Cookie(通行证)，那么服务器就知道这个是”老用户“。")]),t._v(" "),a("p",[t._v("解析："),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/33778904",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/981",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_45-常用的-http-方法有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_45-常用的-http-方法有哪些"}},[t._v("#")]),t._v(" 45.常用的 HTTP 方法有哪些")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("ul",[a("li",[t._v("GET：用于请求访问已经被 URL（统一资源标识符）识别的资源，可以通过 URL 传参给服务器。")]),t._v(" "),a("li",[t._v("POST：用于传输信息给服务器，主要功能与 Get 方法类似，但一般推荐 POST 方式。")]),t._v(" "),a("li",[t._v("PUT：传输文件，报文主体包含文件内容，保存到对应 URL 位置。")]),t._v(" "),a("li",[t._v("HEAD：获取报文首部，与 GET 方法类似，只是不返回报文主体，一般用于验证 URL 是否有效。")]),t._v(" "),a("li",[t._v("DELET：删除文件，与 PUT 方法相反，删除对应 URL 位置的文件。OPTIONS：查询相应 URL 支持的 HTTP 方法。")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/982",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_46-一次完整的-http-请求所经历的-7-个步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_46-一次完整的-http-请求所经历的-7-个步骤"}},[t._v("#")]),t._v(" 46.一次完整的 HTTP 请求所经历的 7 个步骤")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[t._v("HTTP 通信机制是在一次完整的 HTTP 通信过程中，Web 浏览器与 Web 服务器之间将完成下列 7 个步骤：")]),t._v(" "),a("ul",[a("li",[t._v("建立 TCP 连接")])]),t._v(" "),a("p",[t._v("在 HTTP 工作开始之前，Web 浏览器首先要通过网络与 Web 服务器建立连接，该连接是通过 TCP 来完成的，该协议与 IP 协议共同构建 Internet，即著名的 TCP/IP 协议族，因此 Internet 又被称作是 TCP/IP 网络。HTTP 是比 TCP 更高层次的应用层协议，根据规则， 只有低层协议建立之后才能，才能进行更层协议的连接，因此，首先要建立 TCP 连接，一般 TCP 连接的端口号是 80。")]),t._v(" "),a("ul",[a("li",[t._v("Web 浏览器向 Web 服务器发送请求行")])]),t._v(" "),a("p",[t._v("一旦建立了 TCP 连接，Web 浏览器就会向 Web 服务器发送请求命令。例如：GET /sample/hello.jsp HTTP/1.1。")]),t._v(" "),a("ul",[a("li",[t._v("Web 浏览器发送请求头")])]),t._v(" "),a("p",[t._v("浏览器发送其请求命令之后，还要以头信息的形式向 Web 服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。")]),t._v(" "),a("ul",[a("li",[t._v("Web 服务器应答")])]),t._v(" "),a("p",[t._v("客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。")]),t._v(" "),a("ul",[a("li",[t._v("Web 服务器发送应答头")])]),t._v(" "),a("p",[t._v("正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。")]),t._v(" "),a("ul",[a("li",[t._v("Web 服务器向浏览器发送数据")])]),t._v(" "),a("p",[t._v("Web 服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以 Content-Type 应答头信息所描述的格式发送用户所请求的实际数据。")]),t._v(" "),a("ul",[a("li",[t._v("Web 服务器关闭 TCP 连接")])]),t._v(" "),a("p",[t._v("一般情况下，一旦 Web 服务器向浏览器发送了请求数据，它就要关闭 TCP 连接，然后如果浏览器或者服务器在其头信息加入了这行代码：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Connection:keep-alive\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("TCP 连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。")]),t._v(" "),a("p",[t._v("建立 TCP 连接->发送请求行->发送请求头->（到达服务器）发送状态行->发送响应头->发送响应数据->断 TCP 连接")]),t._v(" "),a("p",[t._v("解析："),a("a",{attrs:{href:"https://juejin.im/post/5a8102e0f265da4e710f5910",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/983",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_47-websocket-如何兼容低版本浏览器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_47-websocket-如何兼容低版本浏览器"}},[t._v("#")]),t._v(" 47. webSocket 如何兼容低版本浏览器？")]),t._v(" "),a("p",[t._v("答案：对于低端不支持 websocket 的浏览器，一般有几个解决方案")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("使用轮询或长连接的方式实现伪 websocket 的通信")])]),t._v(" "),a("li",[a("p",[t._v("使用 flash 或其他方法实现一个 websocket 客户端 ：")])])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://segmentfault.com/q/1010000005000671/a-1020000005003936",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://blog.csdn.net/u011925826/article/details/17532465",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/984",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_48-介绍-ssl-和-tls-寺库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_48-介绍-ssl-和-tls-寺库"}},[t._v("#")]),t._v(" 48. 介绍 SSL 和 TLS（寺库）")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/985",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_49-说说网络的五层模型-寺库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_49-说说网络的五层模型-寺库"}},[t._v("#")]),t._v(" 49. 说说网络的五层模型（寺库）")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/986",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_50-cookie-和-token-都存放在-header-中-为什么不会劫持-token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_50-cookie-和-token-都存放在-header-中-为什么不会劫持-token"}},[t._v("#")]),t._v(" 50. cookie 和 token 都存放在 header 中，为什么不会劫持 token？")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/987",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_51-v8-有了解过吗-讲讲了解过-v8-的那几个模块和部分-比如解释一下-v8-的-hidden-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_51-v8-有了解过吗-讲讲了解过-v8-的那几个模块和部分-比如解释一下-v8-的-hidden-class"}},[t._v("#")]),t._v(" 51.v8 有了解过吗？讲讲了解过 v8 的那几个模块和部分，比如解释一下 v8 的 hidden class")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/988",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_52-前端如何实现即时通讯"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_52-前端如何实现即时通讯"}},[t._v("#")]),t._v(" 52.前端如何实现即时通讯？")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/989",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_53-http-状态码-301-和-302-的应用场景分别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_53-http-状态码-301-和-302-的应用场景分别是什么"}},[t._v("#")]),t._v(" 53.Http 状态码 301 和 302 的应用场景分别是什么")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/990",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_54-接口如何防刷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_54-接口如何防刷"}},[t._v("#")]),t._v(" 54.接口如何防刷")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/991",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_55-为什么-http1-1-不能实现多路复用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_55-为什么-http1-1-不能实现多路复用"}},[t._v("#")]),t._v(" 55.为什么 HTTP1.1 不能实现多路复用")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/992",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_56-https-握手过程中-客户端如何验证证书的合法性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_56-https-握手过程中-客户端如何验证证书的合法性"}},[t._v("#")]),t._v(" 56.HTTPS 握手过程中，客户端如何验证证书的合法性")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/993",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_57-介绍-https-握手过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_57-介绍-https-握手过程"}},[t._v("#")]),t._v(" 57.介绍 HTTPS 握手过程")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/994",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_58-简单讲解一下-http2-的多路复用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_58-简单讲解一下-http2-的多路复用"}},[t._v("#")]),t._v(" 58.简单讲解一下 http2 的多路复用")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/995",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_59-http2-0-的多路复用和-http1-x-中的长连接复用区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_59-http2-0-的多路复用和-http1-x-中的长连接复用区别"}},[t._v("#")]),t._v(" 59.HTTP2.0 的多路复用和 HTTP1.X 中的长连接复用区别")]),t._v(" "),a("p",[t._v("答案：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/996",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),a("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);